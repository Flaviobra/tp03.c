#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "cidade.h"

int comp(const void *a, const void *b) {
    Cidade *cidadeA = (Cidade *)a;
    Cidade *cidadeB = (Cidade *)b;
    return cidadeA->Posicao - cidadeB->Posicao;
}


Estrada *getEstrada(const char *nomeArquivo) {
    //printf("abriu a função getestrada\n");
    FILE *file = fopen(nomeArquivo, "r");
    if (file == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        exit (1);
    }

    Estrada *estrada = (Estrada *)malloc(sizeof(Estrada));
    if (estrada == NULL) {
        printf("Erro ao alocar memória para a estrada.\n");
        fclose(file);
        return NULL;
    }

    fscanf(file, "%d", &estrada->T);// lê a primeira linha: tamanho da estrada
    fscanf(file, "%d", &estrada->N);// lê a primeira linha: numero de cidades

    estrada->C = (Cidade *)malloc(estrada->N * sizeof(Cidade));
    if (estrada->C == NULL) {
        printf("Erro ao alocar memória para as cidades.\n");
        free(estrada);
        fclose(file);
        return NULL;
    }

    int i;
    for (i = 0; i < estrada->N; i++) {
        fscanf(file, "%d %255[^\n]", &estrada->C[i].Posicao, &estrada->C[i].Nome);// le o nome das cidades
        //printf("%s\n", estrada->C[i].Nome);
    }

    fclose(file);

    // Ordena as cidades com base na posição ao longo da estrada
    qsort(estrada->C, estrada->N, sizeof(Cidade), comp);

    return estrada;
}


double calcularvizinho(int posicao1, int posicao2, int N) {
    
    double a = fabs(posicao1 - posicao2) / 2;
    
    return a;
}


double calcularMenorVizinhanca(const char *nomeArquivo) {
    
    Estrada *estrada = getEstrada(nomeArquivo);
    if (estrada == NULL) {
        return -1; // Erro ao obter a estrada
    }
    int inicio = 0, final;
    
    final = estrada->T;

    double vizinhacaMedia = calcularvizinho(estrada->C[0].Posicao, estrada->C[1].Posicao, estrada->N);
    double vizinhacaPrimeiro = estrada->C[0].Posicao + vizinhacaMedia;
    


    double menorVizi = vizinhacaPrimeiro;
    if (estrada->N > 2){
        double vizinhancaAtual;
        int i;
        for ( i = 1; i < estrada->N - 1; i++) {
        vizinhancaAtual = calcularvizinho(estrada->C[i].Posicao, estrada->C[i + 1].Posicao, estrada->T);
        double temp = vizinhancaAtual;
        vizinhancaAtual = vizinhancaAtual + vizinhacaMedia;
            if (vizinhancaAtual < menorVizi) {
                menorVizi = vizinhancaAtual;
            
            }
        vizinhacaMedia = temp;
        }
        vizinhancaAtual = ((estrada->C[i].Posicao - final)* -1 ) + vizinhacaMedia;
        if (vizinhancaAtual < menorVizi) {
                menorVizi = vizinhancaAtual;
            
            }
    }else{
        double vizinhancaSegundo = ((estrada->C[1].Posicao - final)* -1 ) + vizinhacaMedia;
        
        if (vizinhacaPrimeiro > vizinhancaSegundo){
            menorVizi = vizinhancaSegundo;            
        }else{
            menorVizi = vizinhacaPrimeiro; 
        }
    }
    


    free(estrada->C);
    free(estrada);

    return menorVizi;
}

char *cidadeMenorVizinhanca(const char *nomeArquivo) {

    Estrada *estrada = getEstrada(nomeArquivo);
    if (estrada == NULL) {
        return NULL; 
    }
    int inicio = 0, final;
    final = estrada->T;
    int iMenorV;
    

    double vizinhacaMedia = calcularvizinho(estrada->C[0].Posicao, estrada->C[1].Posicao, estrada->N);
    double vizinhacaPrimeiro = estrada->C[0].Posicao + vizinhacaMedia;

    

    double menorVizi = vizinhacaPrimeiro;
    if (estrada->N > 2){
        double vizinhancaAtual;
        int i;
        for ( i = 1; i < estrada->N - 1; i++) {
        vizinhancaAtual = calcularvizinho(estrada->C[i].Posicao, estrada->C[i + 1].Posicao, estrada->T);
        double temp = vizinhancaAtual;
        vizinhancaAtual = vizinhancaAtual + vizinhacaMedia;
        
            if (vizinhancaAtual < menorVizi) {
                menorVizi = vizinhancaAtual;
                iMenorV = i;
                
            }
        vizinhacaMedia = temp;
        }
        vizinhancaAtual = ((estrada->C[i].Posicao - final)* -1 ) + vizinhacaMedia;
        if (vizinhancaAtual < menorVizi) {
                menorVizi = vizinhancaAtual;
                iMenorV = i;
        }
    }else{
        double vizinhancaSegundo = ((estrada->C[1].Posicao - final)* -1 ) + vizinhacaMedia;
        
        if (vizinhacaPrimeiro > vizinhancaSegundo){
            menorVizi = vizinhancaSegundo;
            iMenorV = 1;           
        }else{
            menorVizi = vizinhacaPrimeiro;
            iMenorV = 0; 
        }
    }
    
    char *cidadeMenorViz = strdup(estrada->C[iMenorV].Nome);
    
    free(estrada->C);
    free(estrada);

    return cidadeMenorViz;
}
